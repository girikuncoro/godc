// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterParameters cluster parameters
// swagger:model ClusterParameters
type ClusterParameters struct {

	// kubernetes master host
	// Required: true
	KubernetesMasterHost *string `json:"kubernetes_master_host"`

	// kubernetes worker instances
	// Maximum: 50
	// Minimum: 1
	KubernetesWorkerInstances int64 `json:"kubernetes_worker_instances,omitempty"`
}

// Validate validates this cluster parameters
func (m *ClusterParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesMasterHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesWorkerInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterParameters) validateKubernetesMasterHost(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_master_host", "body", m.KubernetesMasterHost); err != nil {
		return err
	}

	return nil
}

func (m *ClusterParameters) validateKubernetesWorkerInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.KubernetesWorkerInstances) { // not required
		return nil
	}

	if err := validate.MinimumInt("kubernetes_worker_instances", "body", int64(m.KubernetesWorkerInstances), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("kubernetes_worker_instances", "body", int64(m.KubernetesWorkerInstances), 50, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterParameters) UnmarshalBinary(b []byte) error {
	var res ClusterParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
