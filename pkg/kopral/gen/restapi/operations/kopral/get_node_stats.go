// Code generated by go-swagger; DO NOT EDIT.

package kopral

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNodeStatsHandlerFunc turns a function with the right signature into a get node stats handler
type GetNodeStatsHandlerFunc func(GetNodeStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNodeStatsHandlerFunc) Handle(params GetNodeStatsParams) middleware.Responder {
	return fn(params)
}

// GetNodeStatsHandler interface for that can handle valid get node stats params
type GetNodeStatsHandler interface {
	Handle(GetNodeStatsParams) middleware.Responder
}

// NewGetNodeStats creates a new http.Handler for the get node stats operation
func NewGetNodeStats(ctx *middleware.Context, handler GetNodeStatsHandler) *GetNodeStats {
	return &GetNodeStats{Context: ctx, Handler: handler}
}

/*GetNodeStats swagger:route GET /stats/node kopral getNodeStats

Show stats of node where kopral is running on

*/
type GetNodeStats struct {
	Context *middleware.Context
	Handler GetNodeStatsHandler
}

func (o *GetNodeStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNodeStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
